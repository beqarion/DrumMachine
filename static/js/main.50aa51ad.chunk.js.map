{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bank","keyCode","keyTrigger","id","url","Display","props","state","this","displayTxt","React","Component","Pad","buttonPressed","playSound","bind","handleKeyPress","removeClass","setState","obj","document","addEventListener","removeEventListener","audioEl","getElementById","currentTime","play","updateText","replace","classList","add","e","button","contains","remove","ind","arr","className","onMouseDown","onMouseUp","src","PadBank","padBank","data","map","el","App","display","txt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.50aa51ad.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst bank = [\n  {\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  },\n  {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  },\n  {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  },\n  {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  },\n  {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  },\n  {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  },\n  {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  },\n  {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  },\n  {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  }\n];\nclass Display  extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      \n    }\n  }\n  render(){\n    return (\n      <div id=\"display\">{this.props.displayTxt}</div>\n    )\n  }\n}\nclass Pad extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      buttonPressed: false\n    }\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.removeClass = this.removeClass.bind(this);\n  }\n  \n  componentDidMount() {\n    this.setState(this.props.obj);\n    document.addEventListener('keydown', this.handleKeyPress);\n    document.addEventListener('keyup', this.removeClass);\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n  playSound(){\n    const audioEl = document.getElementById(this.props.obj.keyTrigger);\n    audioEl.currentTime = 0;\n    audioEl.play();\n    this.props.updateText(this.props.obj.id.replace(/-/g,\" \"));\n    \n    \n    const button = document.getElementById(this.props.obj.id);\n    button.classList.add(\"drum-pad-pressed\");\n    \n  }\n  handleKeyPress(e) {\n    if (e.keyCode === this.props.obj.keyCode) {\n      this.playSound();\n    }\n  }\n  removeClass(){\n    let button = document.getElementById(this.props.obj.id);\n    if (button.classList.contains(\"drum-pad-pressed\")){\n      button.classList.remove(\"drum-pad-pressed\");\n    }\n  }\n  render(){\n    let obj = this.props.obj;\n    let ind = this.props.ind;\n    let arr = this.props.arr;\n    // console.log(obj,ind,arr);\n    return (\n      <div className=\"drum-pad\" id={obj.id} onMouseDown={this.playSound} onMouseUp={this.removeClass}>\n        <audio src={obj.url} className=\"clip\" id={obj.keyTrigger}>\n        </audio>\n        {obj.keyTrigger}\n      </div>\n    )\n  }\n}\nclass PadBank extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      \n    }\n  }\n  render(){\n    let data = [...this.props.data];\n    let padBank = data.map((el, ind, arr)=>{\n      return (\n        <Pad \n          updateText={this.props.updateText}\n          obj = {el}\n          ind = {ind}\n          arr = {arr}\n        />\n      )\n    })\n    return (\n      <div className=\"pad-bank\">\n        {padBank}\n      </div>\n      \n    )\n  }\n}\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      display: \"Press The Keys\"\n    }\n    this.updateText = this.updateText.bind(this);\n  }\n  updateText(txt){\n    this.setState({\n      display: txt\n    })\n  }\n  render(){\n    return (\n      <div id=\"drum-machine\">\n        <PadBank data={bank} updateText={this.updateText}/>\n        <Display displayTxt={this.state.display}/>\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}